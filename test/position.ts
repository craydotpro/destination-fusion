
import { loadFixture } from "@nomicfoundation/hardhat-toolbox-viem/network-helpers";
import hre from "hardhat";
import { parseUnits } from "viem";
import { MAX_ALLOWANCE_VALUE, signPosition } from "./_utils_";

describe("AdvancePosition Execution", function () {
  async function deployFixture() {
    const provider = await hre.viem.getPublicClient()
    const publicClient = await hre.viem.getPublicClient()
    const [owner, otherAccount] = await hre.viem.getWalletClients()

    // Contracts are deployed using the first signer/account by default
    const usdc = await hre.viem.deployContract("MockERC20", ["USDC", "USDC", 6])
    const weth = await hre.viem.deployContract("MockERC20", ["weth", "WETH", 18])
    const orderVerifier = await hre.viem.deployContract("CrayOrderVerifier")
    const fusionGateway = await hre.viem.deployContract("FusionDestination", [orderVerifier.address, owner.account.address, owner.account.address])

    // await usdc.write.approve([orderVerifier.address, MAX_ALLOWANCE_VALUE])
    await usdc.write.approve([fusionGateway.address, MAX_ALLOWANCE_VALUE])
    weth.write.mint([otherAccount.account.address, 10 * 10 ** 18])
    const decimals = await usdc.read.decimals()
    return {
      usdc,
      owner,
      user: otherAccount,
      publicClient,
      decimals,
      orderVerifier,
      provider,
      fusionGateway,
      weth,
    }
  }

  it("should execute an AdvancePosition intent successfully", async function () {
    const { owner, user, usdc, weth, fusionGateway, provider } = await loadFixture(deployFixture);

    const makerAmount = parseUnits("0.8", 18);
    const deadline = (await provider.getBlock()).timestamp + 3600n;

    const advancePosition = {
      maker: user.account.address,
      makerAsset: weth.address,
      makerAmount,
      takerAsset: usdc.address,
      triggerPrice: parseUnits("1", 18),
      deadline,
      isStopLoss: true,
    };

    const signature = await signPosition(user, advancePosition);
    const preWethBalance = await weth.read.balanceOf([user.account.address]);
    const preBalance = await usdc.read.balanceOf([user.account.address]);
    console.log("Pre Balance:", preBalance.toString(), "Pre WETH Balance:", preWethBalance.toString());
    console.log("advancePosition", advancePosition);
    const swapContract = '0x111111125421cA6dc452d289314280a0f8842A65';
    const swapData = "0xf497df75e26b9977f67401cf8100ab08d84951845fa7aee9c0a0f5463e4de858f1ad2a120000000000000000000000007c2fcd399492d4d43c34f9a41fa7939a2ce698a80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000fde4c96c8593536e31f229ea8f37b2ada2699bb200000000000000000000000000000000000000000000000000000000000615a1000000000000000000000000000000000000000000000000000000000005ecb98a0000000000000000000000125400000100687de2760000000000000000000050531ad525fba48ac8cc6dc7b1c1c4821a11ae1116d1e6a2eea78fd2ae4cede870b359f8c6752ed3530487b08efcddbb2ccc61d97befdb7810ff2e27bacd2a1200000000000000000000000000000000000000000000000000000000000615a188000243000614000000000000000000000000000000000000000000000bfdba00000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000086b5eac749f86df56d2232835a00496be23a7f1c68400000223000001360000013600000136000001360000009b00000000000000002ad5004c60e16e54d5007c80ce329adde5b51ef500000000000000687de1b60000b4020d8d000000000000640b4d98400554f17125483b0000000000000000000095770895ad27ad6b0d95d18bd45f0b94f54a968f000000000000000000004a3eb2c7611d3da15802d61b892b2ad624901185972ad4499f120902631a62e5cb8ecfbac59320860000000000000000000033806faf811fcb9c8d902ad5004c60e16e54d5007c80ce329adde5b51ef500000000000000687de1b60000b4020d8d000000000000640b4d98400554f17125483b0000000000000000000095770895ad27ad6b0d95d18bd45f0b94f54a968f000000000000000000004a3eb2c7611d3da15802d61b892b2ad624901185972ad4499f120902631a62e5cb8ecfbac59320860000000000000000000033806faf811fcb9c8d902ad5004c60e16e54d5007c80ce329adde5b51ef50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064687de1a50b4d98400554f17125483b000000000000000000000000000095770895ad27ad6b0d950000d18bd45f0b94f54a968f00000000000000000000000000004a3eb2c7611d3da158020000d61b892b2ad6249011850000972ad4499f120902631a000062e5cb8ecfbac5932086000000000000000000000000000033806faf811fcb9c8d900000000000000000000000000000000000000000000000000000000000000006159500f1ceb16d94083606db7f4d98400554f17125483b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000001ff3684f28c67538d4d072c227340000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044095ea7b30000000000000000000000000000000000001ff3684f28c67538d4d072c22734ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004442213bc0b000000000000000000000000f525ff21c370beb8d9f5c12dc0da2b583f4b949f000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000615a1000000000000000000000000f525ff21c370beb8d9f5c12dc0da2b583f4b949f00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003641fff991f0000000000000000000000005eac749f86df56d2232835a00496be23a7f1c684000000000000000000000000fde4c96c8593536e31f229ea8f37b2ada2699bb2000000000000000000000000000000000000000000000000000000000006060600000000000000000000000000000000000000000000000000000000000000a01d499d353359c67735c19c6b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000018422ce6ede000000000000000000000000f525ff21c370beb8d9f5c12dc0da2b583f4b949f0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000615a1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000687de2f700000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c833589fcd6edb6e08f4c7c32d4f71b54bda0291302000064fde4c96c8593536e31f229ea8f37b2ada2699bb200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064c876d21d000000000000000000000000f5c4f3dc02c3fb9279495a8fef7b0741da956157000000000000000000000000fde4c96c8593536e31f229ea8f37b2ada2699bb200000000000000000000000000000000000000000000000000000000000618e7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    await user.writeContract({
      address: weth.address,
      functionName: "approve",
      abi: weth.abi,
      args: [fusionGateway.address, makerAmount],
    })
    await fusionGateway.write.executeAdvancePositions([
      { ...advancePosition, swapContract, swapData },
      signature
    ]);

    const postBalance = await usdc.read.balanceOf([user.account.address]);
    const postWethBalance = await weth.read.balanceOf([user.account.address]);
    console.log("Post Balance:", postBalance.toString(), "Post WETH Balance:", postWethBalance.toString());
    
  });
});
